<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer.Storage</name>
    </assembly>
    <members>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.Computation">
            <summary>
                Computes an (expiring) boolean result for whether the software is licensed for the functionality installed on the
                Config, and the license data instantly available
                Transient issues are stored within the class; permanent issues are stored in the  provided sink
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.Computation.DefaultNetworkGraceMinutes">
            <summary>
                If a placeholder license doesn't specify NetworkGraceMinutes, we use this value.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.Computation.GetGracePeriodFor(ImageResizer.Plugins.Licensing.ILicenseChain)">
            <summary>
                Pending licenses can offer grace periods. Logs a local issue; trusts the instance (and issue) will be cleared
                when the returned DateTime passes. May subdivide a grace period for more granular issue text.
            </summary>
            <param name="chain"></param>
            <returns></returns>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.DomainLookup.LookupTableLimit">
            <summary>
                Limit the growth of the lookup table cache
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.DomainLookup.customMappings">
            <summary>
                Retained for diagnostics purposes; this data is also in LookupTable
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.DomainLookup.suffixSearchList">
            <summary>
                Used to locate a domain when it's not cached in lookupTable
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.DomainLookup.FindKnownDomain(System.String)">
            <summary>
                Returns null if there is no match or higher-level known domain.
            </summary>
            <param name="similarDomain"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.DomainLookup.TrimLowerInvariant(System.String)">
            <summary>
                Only cleans up string if require; otherwise an identity function
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.LicenseChain">
            <summary>
                A chain of licenses can consist of
                a) 1 or more offline-domain licenses that may or may not enable different feature codes
                b) 1 or more ID licenses, and (optionally) a cached OR remote license for that ID
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.dict">
            <summary>
                Key is a hash of the license signature
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.licenseServerStack">
            <summary>
                License Servers
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.cache">
            <summary>
                Cache for .Licenses()
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.fetcher">
            <summary>
                The current fetcher. Invalidated when URLs are changed
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseChain.remoteLicense">
            <summary>
                The fresh/local (not from cache) remote license
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseChain.Last200">
            <summary>
                The last time when we got the HTTP response.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseChain.FetchedLicense">
            <summary>
                Returns null until a fresh license has been fetched (within process lifetime)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseChain.TryUpdateLicenseServersInfo(ImageResizer.Plugins.Licensing.ILicenseBlob)">
            <summary>
                Returns false if the blob is null,
                if there were no license servers in the blob,
                or if the servers were identical to what we already have.
            </summary>
            <param name="blob"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseChain.Add(ImageResizer.Plugins.LicenseVerifier.LicenseBlob)">
            <summary>
                We have a layer of caching by string. This does not need to be fast.
            </summary>
            <param name="b"></param>
        </member>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1">
            <summary>
                Responsible for displaying a red dot when licensing has failed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1.PermanentIssueSink">
            <summary>
            If null, c.configurationSectionIssues is used
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1.ShouldWatermark">
            <summary>
            Raises an exception if LicenseError == LicenseErrorAction.FailRequest
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseEnforcer`1.PostFlushChanges(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).18: Changes have been flushed to the bitmap, but the final bitmap has not been flipped yet.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton">
            <summary>
                A license manager can serve as a per-process (per app-domain, at least) hub for license fetching
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.aliases">
            <summary>
                Connects all variants of each license to the relevant chain
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.chains">
            <summary>
                By license id/domain, lowercaseinvariant.
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.sink">
            <summary>
                The backing sink
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.allCache">
            <summary>
                The set of all chains
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.sharedCache">
            <summary>
                The set of shared chains
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.HttpClient">
            <summary>
                The HttpClient all fetchers use
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.Clock">
            <summary>
                Source for timestamp information
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.SkipHeartbeats">
            <summary>
            Hearbeats remaining to skip before fetching
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.SkipHeartbeatsIfDiskCacheIsFresh">
            <summary>
            How many initial heartbeats to skip if the last modified date of the disk cached license is recent (under 60m old)
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.AllowFetching">
            <summary>
            License chains consult this method before firing heartbeat events on fetchers
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.TrustedKeys">
            <summary>
                Trusted public keys
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.Cache">
            <summary>
                The persistent cache for licenses
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.GetOrAdd(System.String,ImageResizer.Configuration.LicenseAccess)">
            <summary>
                Registers the license and (if relevant) signs it up for periodic updates from S3. Can also make existing private
                licenses shared.
            </summary>
            <param name="license"></param>
            <param name="access"></param>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.AddLicenseChangeHandler``1(``0,System.Action{``0,ImageResizer.Plugins.Licensing.ILicenseManager})">
            <summary>
                Adds a weak-referenced handler to the LicenseChange event. Since this is (essentially) a static event,
                weak references are important to allow listeners (and Config instances) to be garbage collected.
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="target"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.RemoveLicenseChangeHandler(ImageResizer.Plugins.Licensing.LicenseManagerEvent)">
            <summary>
                Removes the event handler created by AddLicenseChangeHandler
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="E:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.LicenseChange">
            <summary>
                When there is a material change or addition to a license chain (whether private or shared)
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.GetAsyncTasksSnapshot">
            <summary>
                Returns a snapshot of
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseManagerSingleton.WaitForTasks">
            <summary>
                Returns the number of tasks that were waited for. Does not wait for new tasks that are scheduled during execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseDetailsExtensions.GetFeatures(ImageResizer.Plugins.Licensing.ILicenseDetails)">
            <summary>
                Enumerates the feature code list. No case changes are performed
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseDetailsExtensions.GetAllDomains(ImageResizer.Plugins.Licensing.ILicenseDetails)">
            <summary>
                Enumerates any/all values from "Domain" and "Domains" field, trimming and lowercasing all values.
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseDetailsExtensions.GetValidLicenseServers(ImageResizer.Plugins.Licensing.ILicenseDetails)">
            <summary>
                Returns all valid license servers from the LicenseServers field
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.LicenseVerifier.LicenseBlobExtensions.ToRedactedString(ImageResizer.Plugins.Licensing.ILicenseBlob)">
            <summary>
                Redacts the value of the 'Secret' field
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.LicenseFeatureCodes">
            <summary>
            Returns the license key feature codes that are able to activate this plugins.
            </summary>
        </member>
        <member name="M:ImageResizer.Storage.BlobProviderBase.RedactFrom(ImageResizer.Configuration.Xml.Node)">
            <summary>
            Redacts any connectionString attribute from the diagnostics page.
            </summary>
            <param name="resizer"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.CacheMetadata">
            <summary>
            If true, metadata (such as modified dates and existence) will be cached.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.MetadataCache">
            <summary>
            The caching system responsible for caching metadata (like existence and modified dates)
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.CheckForModifiedFiles">
            <summary>
            If true, will cause additional requests to verify the remote resource is up-to-date.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.LazyExistenceCheck">
            <summary>
            To avoid an extra request, it is possible to 'fail late', throwing FileNotFound when Open() is called instead of earlier.
            Upside: faster. Downside: no other provider can handle the request if there are route conflicts.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.UntrustedData">
            <summary>
            (default: false) When true, all requests will be re-encoded before being served to the client. Invalid or malicious images will fail with an error if they cannot be read as images.
            This should prevent malicious files from being served to the client.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.CacheUnmodifiedFiles">
            <summary>
            (default false). When true, files and unmodified images (i.e, no querystring) will be cached to disk (if they are requested that way) instead of only caching requests for resized images.
            DiskCache plugin must be installed for this to have any effect.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.RequireImageExtension">
            <summary>
            (default true) When false, all requests inside the VirtualFilesystemPrefix folder will be handled by this plugin.
            You should still use image extensions, otherwise we don't know what content type to send with the response, and browsers will choke. 
            It's  also the cleanest way to tell the image resizer what kind of file type you'd like back when you request resizing.
            This setting is designed to support non-image file serving
            It will also cause conflicts if VirtualFilesystemPrefix overlaps with a folder name used for something else.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.BlobProviderBase.ExposeAsVpp">
            <summary>
            If true, the blob provide will be accessible through the ASP.NET VirtualPathProvider system.
            </summary>
        </member>
        <member name="M:ImageResizer.Storage.BlobProviderBase.Belongs(System.String)">
            <summary>
            Returns true if the request  is within the VirtualFilesystemPrefix. Override to provide more granular heuristics
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Storage.BlobProviderBase.FetchMetadataAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Should perform an immediate (uncached) query of blob metadata (such as existence and modified date information)
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ImageResizer.Storage.BlobProviderBase.FetchMetadataCachedAsync(System.String,System.Collections.Specialized.NameValueCollection)" -->
        <member name="M:ImageResizer.Storage.BlobProviderBase.FileExists(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            If LazyExistenceCheck = true, same as Belongs(virtualPath). Otherwise also performs actual BlobExists() call.
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Storage.BlobProviderBase.BlobExistsAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Performs a cached existence check to verify the blob actually exists.
            </summary>
            <param name="subPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Storage.BlobProviderBase.GetModifiedDateUtcAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Performs a cached metadata query to get the last modified date (UTC). 
            </summary>
            <param name="virtualPath"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Storage.BlobProviderBase.VppExposeFile(System.String)">
            <summary>
            Returns true if the given file should be made available to the VirtualPathProvider system.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Storage.StandardMetadataCache.MetadataAbsoluteExpiration">
            <summary>
            Existence and modified date metadata about files is cached for, at longest, this amount of time after it is first stored.
            </summary>
        </member>
        <member name="P:ImageResizer.Storage.StandardMetadataCache.MetadataSlidingExpiration">
            <summary>
            Existence and modified date metadata about files is cached for this long after it is last accessed.
            </summary>
        </member>
    </members>
</doc>
